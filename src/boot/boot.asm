; =============================================
; MyOS Bootloader - Version 1.0
; =============================================

[bits 16]           ; 16-битный реальный режим
[org 0x7C00]        ; Адрес загрузки BIOS

; Точка входа загрузчика
start:
    ; Инициализация сегментных регистров и стека
    cli             ; Запрещаем прерывания
    xor ax, ax      ; Обнуляем AX
    mov ds, ax      ; Устанавливаем DS = 0
    mov es, ax      ; Устанавливаем ES = 0
    mov ss, ax      ; Устанавливаем SS = 0
    mov sp, 0x7C00  ; Устанавливаем стек ниже загрузчика
    sti             ; Разрешаем прерывания

    ; Очистка экрана
    mov ax, 0x0003  ; Функция очистки экрана
    int 0x10

    ; Вывод приветственного сообщения
    mov si, msg_loading
    call print_string

    ; Здесь позже будет загрузка ядра с диска...

    ; Завершение работы (временное)
    mov si, msg_halt
    call print_string

    ; Бесконечный цикл
    cli
.halt:
    hlt
    jmp .halt

; =============================================
; Функция вывода строки
; Вход: SI - указатель на строку (завершается 0)
; =============================================
print_string:
    pusha           ; Сохраняем все регистры
    mov ah, 0x0E    ; Функция BIOS: вывод символа
.loop:
    lodsb           ; Загружаем байт из [SI] в AL
    cmp al, 0       ; Конец строки?
    je .done        ; Если да - выходим
    int 0x10        ; Выводим символ
    jmp .loop       ; Следующий символ
.done:
    popa            ; Восстанавливаем регистры
    ret

; =============================================
; Данные
; =============================================
msg_loading db 'MyOS Bootloader v1.0', 0x0D, 0x0A, 0
msg_halt    db 'System halted.', 0x0D, 0x0A, 0

; =============================================
; Заполнение и сигнатура загрузочного сектора
; =============================================
times 510-($-$$) db 0   ; Заполняем оставшиеся байты нулями
dw 0xAA55               ; Сигнатура загрузочного сектора